plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'kotlin-platform-android'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.capricorn.advertisement"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        testInstrumentationRunner 'com.capricorn.advertisement.CustomTestRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'

        buildConfigField 'String', 'BASE_URL', '"https://ey3f2y0nre.execute-api.us-east-1.amazonaws.com"'


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    configurations.all {
        resolutionStrategy {
            exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"

        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true

        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/resources'
            test {
                resources.srcDirs += sharedTestDir
            }
            androidTest {
                resources.srcDirs += sharedTestDir
            }
        }
    }
}

dependencies {
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.annotation:annotation:$annotationVersion"
    implementation 'androidx.multidex:multidex:2.0.1'


    //android support and core dependencies
    implementation "androidx.appcompat:appcompat:$appCompactVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifeCycleVersion"
    implementation "androidx.legacy:legacy-support-v4:$legacySupportVersion"



    //hilt dependencies
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    //hilt worker manager
    implementation "androidx.hilt:hilt-work:$hiltWorkerManagerVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltWorkerManagerVersion"


    //hilt test dependencies
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"


    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$moshiConvertorVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"


    //Glide for Image Loading
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    //joda time data
    implementation 'net.danlew:android.joda:2.10.9.1'


    //testing Dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "io.mockk:mockk:$mockVersion"
    androidTestImplementation "org.assertj:assertj-core:$assertjVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoIntentsVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesTestVersion"
    implementation "androidx.arch.core:core-testing:$coreTestingVersion"
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    implementation "androidx.test.espresso:espresso-contrib:$espressoVersion"

    // AndroidX Test - JVM testing
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    testImplementation "androidx.test:rules:$androidXTestRulesVersion"
    implementation "androidx.test:core:$androidXTestCoreVersion"
    implementation "androidx.fragment:fragment:$fragmentVersion"
    androidTestImplementation "com.google.truth:truth:1.0.1"
}
